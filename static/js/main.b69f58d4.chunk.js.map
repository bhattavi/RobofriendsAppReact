{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","id","name","email","className","src","alt","CardList","robots","map","robot","key","SearchBar","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filterdRobots","filter","toLowerCase","includes","length","SearchBox","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAeeA,G,YAZF,SAACC,GAAW,IAClBC,EAAmBD,EAAnBC,GAAIC,EAAeF,EAAfE,KAAMC,EAASH,EAATG,MACb,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAK,wBAA0BJ,EAAK,WAAYK,IAAI,WACzD,6BACI,4BAAKJ,GACL,2BAAIC,OCcLI,EApBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAKf,OACI,6BACDA,EAAOC,KAAI,SAAAC,GACZ,OAAQ,kBAAC,EAAD,CACPC,IAAOD,EAAMT,GACbA,GAAMS,EAAMT,GACZC,KAAQQ,EAAMR,KACdC,MAASO,EAAMP,aCDPS,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAE7B,OAEI,yBAAKV,UAAU,OACX,2BAAOA,UAAU,mCACjBW,KAAK,SACJC,YAAY,SACZC,SAAUH,MCARI,EARC,SAAClB,GAEb,OACI,yBAAKmB,MAAO,CAACC,SAAU,SAAUC,OAAO,kBAAoBC,OAAO,UAClEtB,EAAMuB,WCgBAC,E,kDAlBX,WAAYxB,GAAO,IAAD,8BACd,cAAMA,IAEDyB,MAAQ,CACTC,UAAU,GAJA,E,8DAOAC,EAAOC,GACrBC,KAAKC,SAAS,CACVJ,UAAS,M,+BAKb,OAAOG,KAAKJ,MAAMC,SAAW,8DAC3BG,KAAK7B,MAAMuB,a,GAjBMQ,aCyDZC,E,kDAlDb,aAAc,IAAD,8BAEX,gBAQFC,eAAiB,SAACC,GAEhB,EAAKJ,SAAS,CACZjB,YAAaqB,EAAMC,OAAOC,SAT5B,EAAKX,MAAQ,CACXjB,OAAQ,GACRK,YAAa,IANJ,E,gEAmBO,IAAD,OACjBwB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAACtB,OAAQiC,S,+BAI/B,IAAD,EAEwBZ,KAAKJ,MAA5BjB,EAFD,EAECA,OAAQK,EAFT,EAESA,YACT6B,EAAgBlC,EAAOmC,QAAO,SAAAjC,GAClC,OAAOA,EAAMR,KAAK0C,cAAcC,SAAShC,EAAY+B,kBAExD,OAAQpC,EAAOsC,OAEd,yBAAK1C,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC2C,EAAD,CAAWjC,aAAgBe,KAAKI,iBAChC,kBAAC,EAAD,KACE,kBAAC,EAAD,KACF,kBAAC,EAAD,CAAUzB,OAAUkC,OAPC,8C,GAlCTX,aCKEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,a","file":"static/js/main.b69f58d4.chunk.js","sourcesContent":["import React from 'react';\nimport 'tachyons';\n\nconst Card = (props) => {\nconst {id, name, email} = props;\n    return(\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 bw2 shadow-5 grow\">\n            <img src={\"https://robohash.org/\" + id + \"?200*200\"} alt=\"robots\"/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ({robots}) => {\n\n    // if(true) throw new Error(\"its not working\");\n  \n    \n    return(\n        <div>\n     { robots.map(robot => {\n      return  <Card\n       key = {robot.id} \n       id = {robot.id} \n       name = {robot.name} \n       email = {robot.email}\n       />\n  })}\n      \n    \n        </div>\n    );\n}\nexport default CardList;","import React from 'react';\n\nconst SearchBar = ({searchfield, searchChange}) => {\n\n    return(\n\n        <div className=\"pa2\">\n            <input className=\"pa3 ba b--green bg-lightest-blue\"\n            type=\"search\"\n             placeholder=\"Robots\"\n             onChange={searchChange}/>\n        </div>\n    )\n}\n\nexport default SearchBar;","import React from 'react';\n\n const Scroll = (props) => {\n\n    return(\n        <div style={{overflow: 'scroll', border:'2px solid black' , height:'800px'}}>\n        {props.children}\n        </div>\n    )\n}\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundry extends Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            hasError: false\n        }\n    }\n    componentDidCatch(error, info){\n        this.setState({\n            hasError:true\n        });\n    }\n\n    render(){\n        return this.state.hasError ? <h1>Sorry something went wrong....</h1>\n        : this.props.children;\n    }\n}\nexport default ErrorBoundry;","import React, {Component} from 'react';\nimport './App.css';\nimport CardList  from './components/CardList';\nimport SearchBox from './components/SearchBox';\nimport Scroll from './components/Scroll';\nimport ErrorBoundry from './components/ErrorBoundry';\n\nclass App extends Component {\n\n  constructor(){\n    \n    super();\n\n    this.state = {\n      robots: [],\n      searchfield: ''\n    }\n  }\n\n  onSearchChange = (event) => {\n\n    this.setState({\n      searchfield: event.target.value\n    })\n\n    \n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({robots: users}))\n  }\n\n\n  render(){\n\n    const {robots, searchfield} = this.state;\n    const filterdRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    })\n   return !robots.length ? <h1>Loading...</h1> :\n   \n    <div className=\"tc\">\n      <h1 className=\"f2\">Robofriends</h1>\n      <SearchBox searchChange = {this.onSearchChange} />\n      <Scroll>\n        <ErrorBoundry>\n      <CardList robots = {filterdRobots}/>\n      </ErrorBoundry>\n      </Scroll>\n  \n    </div>\n  \n \n}\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}